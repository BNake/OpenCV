Module 2.1 - Color Spaces
Introduction
Color is a characteristic feature of human visual perception. The retina contains three types of color
receptor cells. Thus, three attributes are necessary and sufficient to describe a color completely for the
human visual system.
A color space is a representation of color using different attributes. The attributes can be the color tint
(Hue), saturation and brightness or Red, Green and Blue or something else. The different attributes are
represented along the axes of a 3-dimensional space, so that it is easier to describe them
mathematically and find relations among the different color spaces. The major color spaces we will
discuss are :
1. RGB
2. HSV
3. YCrCb
4. Lab
1. Why do we need different color spaces?


Модуль 2.1 - Цветовые Пространства
Введение
Цвет-характерная черта зрительного восприятия человека. Сетчатка содержит три типа цвета
рецепторные клетки. Таким образом, три атрибута необходимы и достаточны для описания цвета полностью для
зрительная система человека.
Цветовое пространство-это представление цвета с использованием различных атрибутов. Атрибутами может быть цветовой оттенок
(Оттенок), насыщенность и яркость или красный, зеленый и синий или что-то еще. Различные атрибуты
представлены по осям трехмерного пространства, так что их проще описать
математически и найти отношения между различными цветовыми пространствами. Главные цветовые пространства мы будем
обсудить :
1. формат RGB
2.  HSV
3. YCrCb
4. Lab
1. Зачем нужны разные цветовые пространства?




Different color spaces have been designed to cater to different applications like object segmentation,
transmission, displaying, printing etc. Some properties of color spaces are :
Device Dependency - The color is dependent on the device producing it (camera) and the device
displaying it (Monitor). Most color spaces are device dependent except for Lab color space, which
is designed to be device independent. Please read this article to gain more insight into this.
Intuitiveness - It is more intuitive to be able to specify a color as "orange" (which we can do in HSV
color space) instead of calling it a mixture of red and green (which we have to do in RGB color
space).
• Perceptual uniformity - A small change in the value of a particular attribute should result in a
proportional change in perception of that attribute. This is also very unique to the Lab color space.
The RGB color space is highly non-uniform in this aspect.
In the following sections we will describe each color space and see some example applications. These
applications are simple and are included to give the users some hands-on experience with the code
and a chance to appreciate the unique features of the different color spaces.
However, it should be noted that the choice of color space depends largely on the problem you are
trying to solve. Given a problem, you should always try and experiment with different color spaces for
arriving at the desired solution. We will use the following image to illustrate various aspects of the
color spaces.




Различные цветовые пространства были разработаны для удовлетворения различных приложений, таких как сегментация объектов,
передача, показ, печатание etc. Некоторые свойства цветовых пространств :
Зависимость устройства-цвет зависит от устройства, его производящего (камеры) и устройства
отображения (монитор). Большинство цветовых пространств зависят от устройства, за исключением цветового пространства лаборатории, которое
предназначен для самостоятельного устройства. Пожалуйста, прочитайте эту статью, чтобы получить больше информации об этом.
Интуитивность-более интуитивным является возможность указать цвет как "оранжевый" (что мы можем сделать в HSV
цветовое пространство) вместо того, чтобы называть его смесью красного и зеленого (что мы должны сделать в цвете RGB
пространство.)
* Перцептивная однородность-небольшое изменение значения конкретного атрибута должно привести к
пропорциональное изменение восприятия этого атрибута. Это также очень уникально для цветового пространства лаборатории.
Цветовое пространство RGB очень неоднородно в этом аспекте.
В следующих разделах мы опишем каждое цветовое пространство и рассмотрим некоторые примеры приложений. Эти
приложения просты и включены, чтобы дать пользователям практический опыт работы с кодом
и возможность оценить уникальные особенности различных цветовых пространств.
Однако, следует отметить, что выбор цветового пространства во многом зависит от проблемы, которую вы
пытаюсь решить. Учитывая проблему, вы всегда должны пытаться экспериментировать с различными цветовыми пространствами для
прибытие к желаемому решению. Мы будем использовать следующее изображение для иллюстрации различных аспектов
цветовое пространство


2. The RGB color space
The RGB color space is an additive color space in which Red, Green and Blue light rays are added in
various proportions to produce different colors. It is the most commonly used color space in image
processing.

2. Цветовое пространство RGB
Цветовое пространство RGB-это аддитивное цветовое пространство, в которое добавляются красные, зеленые и синие световые лучи
различные пропорции для получения разных цветов. Это наиболее часто используемое цветовое пространство в изображении
обработка.


As we have seen earlier, in OpenCV, the image is loaded into BGR format by default. It is the same as
RGB, but stored in reverse order. For images with 8-bit per channel, the intensity values for a given
channel can range from 0 to 255. Brighter pixels signify higher intensity values in a particular channel
and vice-versa. The three channels (R, G, B) of our example image are shown below.


Так мы видели ранее, в OpenCV изображение загружается в формат BGR по умолчанию. Это то же самое, что
RGB, но хранится в обратном порядке. Для изображений с 8-битным каналом значения интенсивности для данного
канал может колебаться от 0 до 255. Более яркие пиксели означают более высокие значения интенсивности в определенном канале
и наоборот. Три канала (R, G, B) нашего примера изображения показаны ниже.


In the above figure, it can be seen that the red color (middle perper) displays high intensity ( bright
color) only in the R channel whereas the yellow color (left pepper) has high intensity values in both R
and G channels which can be attributed to the additive property of the color space (yellow is a mixture
of red and green).
In the RGB color space, all three channels contain information about the color as well as brightness. It
is better for some applications if we can separate the color component, also known as Chrominance,
from the lightness or brightness component also known as Luminance. This separation is present in
the other color spaces we will talk about next.



3. The HSV color space
This is one of the most popular color spaces used in image processing after the RGB color space. Its
three components are :
Hue - indicates the color of the pixel
Saturation - indicates the purity of the color
Value - indicates the amount of brightness of the pixel
The HSV color space converts the RGB color space from cartesian coordinates (x, y, z) to cylindrical
coordinates (p, z). It is more intuitive than the RGB color space because it separates the color and
brightness into different axes. This makes it easier for us to describe any color directly.
Let us first see how to convert an image from BGR to HSV format and display the different channels to
get some more insights about them. We will use OpenCV's cvtColor function for conversion.

На приведенном выше рисунке видно, что красный цвет (средний Перпер) отображает высокую интенсивность (яркий
цвет) только в канале R, тогда как желтый цвет (левый перец) имеет высокие значения интенсивности в обоих R
и G-каналы, которые можно отнести к аддитивному свойству цветового пространства (желтый-это смесь
красного и зеленого).
В цветовом пространстве RGB, все три канала содержат информацию о цвете, а также яркость. Он
лучше для некоторых приложений, если мы можем отделить компонент цвета, также известный как цветность,
от компонента легковесности или яркости также известного как яркость. Это разделение присутствует в
о других цветовых пространствах мы поговорим далее.





3. Цветовое пространство HSV
Это одно из самых популярных цветовых пространств, используемых при обработке изображений после цветового пространства RGB. Свой
три компонента :
Оттенок - указывает на цвет пикселя
Насыщенность-указывает на чистоту цвета
Value-указывает количество яркости пикселя
Цветовое пространство HSV преобразует цветовое пространство RGB из декартовых координат (x, y, z) в цилиндрическое
координаты (p, z). Это более интуитивно, чем цветовое пространство RGB, потому что он разделяет цвет и
яркость в различные оси. Это делает его более легким для нас описать любой цвет сразу.
Давайте сначала посмотрим, как преобразовать изображение из формата BGR в HSV и отобразить различные каналы в
узнайте о них побольше. Мы будем использовать функцию Cvtcolor OpenCV для преобразования.



The Hue channel refers to the color and its values, ranging from 0 to 180 in OpenCV. Since the HSV
color space is represented in a cylindrical coordinate system, the values for Hue wrap around 180. For example, the Hue for red color is near 180. So, some tints of red can wrap around 180 and have values
around 0. This is evident from the middle (red) pepper in the figure above, which shows both very high
(180) and low (0) Hue values.
Saturation refers to how pure the color is. Pure red has high saturation. Different shades of a color
correspond to different saturation levels. Saturation of 0 corresponds to white color which indicates
that the color shade is at the lowest or the color is simply absent. So, in the figure above, we can see
that the green and red peppers are highly saturated, i. e. these colors are in their purest form. On the
other hand, the yellow pepper has relatively lower saturation. With the Hue and Saturation channels
known, we have a better idea about the color and tints or shades of color in our image.
Value refers to lightness or brightness. It indicates how dark or bright the color is. It also signifies the
amount of light that might have fallen on the object. It is pretty clear from the original image and the
Value channel that the red and yellow peppers are much brighter as compared to the green pepper.
Let us see two simple applications using the HSV color space.
1. Find the dominant colors in a given image
2. Desaturation filter.
3. 1. Application - Find the dominant colors in an image
It can be interesting to know the dominant colors that are present in a given image, and products can
be built from this information. To identify the dominant colors, we will use the histogram plot of the
Hue channel. We will use this as an opportunity to introduce a very important concept called
Histogram.
3.1.1. What is a Histogram?
A histogram is a very important tool in Image processing. It is a graphical representation of the
distribution of data. An image histogram gives a graphical representation of the tonal distribution in a
digital image.
The x-axis indicates the range of values the variable can take. This range can be divided into a series
of intervals called bins. The y-axis shows the count of how many values fall within that interval or bin.
Before going into image histograms, let's take a very simple e
we want to study the performance of students in class of 50 students in a subject, Mathematics. The
minimum and maximum performance scores are 0 and 100, respectively. The scores obtained by the
50 students are given below in the table.



Канал оттенка относится к цвету и его значениям в диапазоне от 0 до 180 в OpenCV. С момента HSV
цветовое пространство представлено в цилиндрической системе координат, значения для оттенка охватывают около 180. Для
например, оттенок красного цвета близок к 180. Итак, некоторые оттенки красного могут обернуться вокруг 180 и иметь значения
около 0. Это видно из среднего (красного) перца на рисунке выше, который показывает как очень высокий
(180) и низкие (0) значения оттенков.
Насыщенность относится к тому, насколько чист цвет. Чистый красный имеет высокую насыщенность. Разные оттенки цвета
соответствуют различным уровням насыщенности. Насыщенность 0 соответствует белому цвету, который указывает
что оттенок цвета находится на самом низком уровне или цвет просто отсутствует. Итак, на рисунке выше мы видим
зеленый и красный перец очень насыщенный, я. е. эти цвета в их чистом виде. На
другой стороны, желтый перец имеет относительно низкую насыщенность. С каналами оттенка и насыщенности
известно, что у нас есть лучшее представление о цвете и оттенках или оттенках цвета в нашем изображении.
Значение относится к легкости и яркости. Он показывает, насколько темный или яркий цвет. Это также означает
количество света, которое могло упасть на объект. Это довольно ясно из исходного изображения и
Значение канала в том, что красный и желтый перец намного ярче по сравнению с зеленым перцем.
Давайте рассмотрим два простых приложения, использующих цветовое пространство HSV.
1. Найти доминирующие цвета в данном образе
2. Десатурационный фильтр.
3. 1. Применение-найти доминирующие цвета в изображении
Может быть интересно узнать доминирующие цвета, которые присутствуют в данном изображении, и продукты могут
будьте построены из этой информации. Чтобы определить доминирующие цвета, мы будем использовать график гистограммы
Канал Хюэ. Мы будем использовать это как возможность представить очень важную концепцию под названием
Гистограмма.

3.1.1. Что такое гистограмма?
Гистограмма-очень важный инструмент в обработке изображений. Это графическое представление
распределение данных. Гистограмма изображения дает графическое представление тонального распределения в
цифровое изображение.
Ось x указывает диапазон значений, которые может принимать переменная. Этот ряд можно разделить в серию
интервалов, называемых бункерами. Ось y показывает количество значений, попадающих в этот интервал или ячейку.
Прежде чем перейти к гистограммам изображений, давайте возьмем очень простое e
мы хотим изучить успеваемость студентов в классе из 50 студентов по предмету, математике. Этот
минимальный и максимальный баллы производительности равны 0 и 100 соответственно. Баллы, полученные
50 студентов приведены ниже в таблице.


For computing the histogram, we divide the overall range of 100 scores into 10 bins so that scores 0-10
are in bin 1, scores 11-20 are in bin 2 and so on. The histogram simply counts the number of students
with scores falling in a certain bin. For example, only 2 students got scores in the range 0-10. Thus, bin
1 has a count of 2. Similarly, bin 2 and 10 have counts of 3 and so on.
From the histogram plotted above, we can infer that a lot of students received scores in the ranges of
40-50 (10 students) and 70-80 (11 students). It can also be seen that most students received a score
of more than 40.
Note that we can change the bin size (10 marks) and accordingly the number of bins (10 bins) will also
change. For a bin size of 5, the number of bins will become 20.
3.1.2. Plotting Histograms using OpenCV
In an image histogram, the x-axis represents the different color values, which lie between 0 and 255,
and the y-axis represents the number of times a particular intensity value occurs in the image.
We can use the calcHist() function provided in OpenCV for finding the histogram. Unfortunately,
OpenCV does not provide any function to plot the histogram. So, we will write a program to plot the
histogram using some OpenCV functions.
Note: In Python, we can also use the function plt.hist() available in the matplotlib library for drawing the
histogram.
3.1.3. Histogram Code & Tutorial


Для вычисления гистограммы мы разделяем общий диапазон 100 баллов на 10 ячеек, так что баллы 0-10
находятся в бункере 1, баллы 11-20 находятся в бункере 2 и так далее. Гистограмма просто подсчитывает количество студентов
со счетом, падающим в определенный ящик. Например, только 2 студента получили баллы в диапазоне 0-10. Таким образом, bin
1 и счетчик 2. Аналогично, bin 2 и 10 имеют количество 3 и так далее.
Из гистограммы, построенной выше, можно сделать вывод, что многие студенты получили баллы в диапазонах
40-50 (10 студентов) и 70-80 (11 студентов). Также можно видеть, что большинство студентов получили оценку
более 40.
Обратите внимание, что мы можем изменить размер бункера (10 марок) и, соответственно, количество бункеров (10 бункеров) также будет
изменение. Для бункера размером 5 количество бункеров станет 20.
3.1.2. Построение гистограмм с использованием OpenCV
В гистограмме изображения ось x представляет различные значения цвета, которые лежат между 0 и 255,
и ось y представляет количество раз, когда определенное значение интенсивности происходит на изображении.
Мы можем использовать функцию calcHist (), предоставленную в OpenCV для поиска гистограммы. К сожалению,
OpenCV не предоставляет никаких функций для построения гистограммы. Итак, мы напишем программу для построения
гистограмма с использованием некоторых функций OpenCV.
Примечание: в Python, мы также можем использовать функцию plt.hist (), доступный в библиотеке matplotlib для рисования
гистограмма.
3.1.3. Код Гистограммы & Учебник


/*
Copyright 2017 BIG VISION LLC ALL RIGHTS RESERVED

This code is made available to the students of
the online course titled "Computer Vision for Faces"
by Satya Mallick for personal non-commercial use.

Sharing this code is strictly prohibited without written
permission from Big Vision LLC.

For licensing and other inquiries, please email
spmallick@bigvisionllc.com
*/

#include <iostream>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

using namespace std;
using namespace cv;

int main(int argc, char ** argv)
{

  // Read the image
  string filename = "../data/images/capsicum.jpg";
  if (argc == 2)
  {
    filename = argv[1];
  }

  Mat img = imread(filename);

  // Convert to HSV color space
  Mat hsvImage;
  cvtColor(img, hsvImage, COLOR_BGR2HSV);

  // Split the channels
  vector<Mat> channels(3);
  split(hsvImage, channels);

  imshow( "Image", img );

  // Initialize parameters
  int histSize = 180;    // bin size
  float range[] = { 0, 179 };
  const float *ranges[] = { range };

  // Calculate histogram
  MatND hist;
  calcHist( &channels[0], 1, 0, Mat(), hist, 1, &histSize, ranges, true, false );

  // Parameters for the plot
  int hist_w = histSize*3; int hist_h = 400;
  int bin_w = cvRound( (double) hist_w/histSize );

  // construct the histogram as an image
  Mat histImage( hist_h, hist_w, CV_8UC3, Scalar( 255,255,255) );
  normalize(hist, hist, 0, histImage.rows, NORM_MINMAX, -1, Mat() );

  // draw the x-axis
  line(histImage, Point(0, hist_h - 30), Point(hist_w, hist_h - 30), Scalar(0, 0, 0), 2, 8, 0);

  // Special case for specifying the origin of x-axis
  line(histImage, Point(0, hist_h - 35), Point(0, hist_h - 25), Scalar(0, 0, 0), 2, 8, 0);
  putText(histImage, "0", Point(0, hist_h-5), cv::FONT_HERSHEY_COMPLEX, .5, (0,0,0), 1, cv::LINE_AA);
  // Draw the histogram
  for( int i = 1; i < histSize; i++ )
  {
    line( histImage, Point( bin_w*(i-1), hist_h - 30 - cvRound(hist.at<float>(i-1)) ) ,
                     Point( bin_w*(i), hist_h - 30 - cvRound(hist.at<float>(i)) ),
                     Scalar( 0, 0, 255), 2, 8, 0  );

    // show the x axis values
    if (i % 20 == 0)
    {
      char buffer[5];
      sprintf(buffer,"%d",i);
      line(histImage, Point(i*bin_w, hist_h - 35), Point(i*bin_w, hist_h - 25), Scalar(0, 0, 0), 2, 8, 0);
      putText(histImage, buffer, Point(i*bin_w, hist_h-5), cv::FONT_HERSHEY_COMPLEX, .5, (0,0,0), 1, cv::LINE_AA);
    }
  }
  namedWindow("Original Image",WINDOW_AUTOSIZE);
  namedWindow("Histogram of Hue channel",WINDOW_AUTOSIZE);

  imshow("Original Image", img);
  imshow( "Histogram of Hue channel", histImage );
  imwrite( "results/hueHistogram.jpg", histImage );

  waitKey(0);
  destroyAllWindows();
  return 0;
}



From the histogram plots, we can see that the peaks are at 0/180, 20, 60 and 100. These correspond to
Red, Yellow, Green and Blue colors respectively. The highest peak is for blue since that is the most
dominant color in the image.
Since now we know that colors have very specific Hue, we can use this knowledge to do color-based
segmentation. We will see how to do skin color segmentation in upcoming sections.
3. 2. Application - Desaturation Filter
Photo editing apps like photoshop or instagram use many different kinds of image enhancement
techniques to make the images look special. One such image enhancement technique is desaturation.
We desaturate the image by decreasing the values in the Saturation channel. This result in an image
which looks faded or washed out, with no colors. This effect is used in many instagram filters,
especially in the Moon filter, which we will visit in upcoming sections.
3.2.1. Desaturation Code and Tutorial



Из графиков гистограммы видно, что пики находятся на 0/180, 20, 60 и 100. Они соответствуют
Красный, желтый, зеленый и синий цвета соответственно. Самый высокий пик для синего, так как это самое
доминирующий цвет на изображении.
Поскольку теперь мы знаем, что цвета имеют очень специфический оттенок, мы можем использовать эти знания для цветовых решений
сегментация. Мы увидим, как сделать сегментацию цвета кожи в следующих разделах.
3. 2. Приложения - Фильтр Обесцвечивание 
Приложения для редактирования фотографий, такие как photoshop или instagram, используют множество различных видов улучшения изображений
техники, чтобы изображения выглядели особенными. Одним из таких методов улучшения изображения-это обесцвечивание.
Мы обесцветить изображения путем уменьшения значения насыщенности канала. Это приводит к изображению
который выглядит выцветшим или размытым, без цветов. Этот эффект используется во многих фильтрах instagram ,
особенно в разделе лунный фильтр, который мы посетим в следующих разделах.
3.2.1. Код и учебник по десатурации


/*
Copyright 2017 BIG VISION LLC ALL RIGHTS RESERVED

This code is made available to the students of
the online course titled "Computer Vision for Faces"
by Satya Mallick for personal non-commercial use.

Sharing this code is strictly prohibited without written
permission from Big Vision LLC.

For licensing and other inquiries, please email
spmallick@bigvisionllc.com
*/

#include <opencv2/opencv.hpp>
#include <math.h>

using namespace cv;
using namespace std;

int main(int argc, char ** argv)
{
  // Read the image
  string filename = "../data/images/capsicum.jpg";
  if (argc == 2)
  {
    filename = argv[1];
  }

  Mat Image = imread(filename);

  // Specify scaling factor
  float saturationScale = 0.01;

  Mat hsvImage;
  // Convert to HSV color space
  cv::cvtColor(Image,hsvImage,COLOR_BGR2HSV);

  // Convert to float32
  hsvImage.convertTo(hsvImage,CV_32F);

  vector<Mat>channels(3);
  // Split the channels
  split(hsvImage,channels);

  // Multiply S channel by scaling factor
  channels[1] = channels[1] * saturationScale;

  // Clipping operation performed to limit pixel values between 0 and 255
  min(channels[1],255,channels[1]);
  max(channels[1],0,channels[1]);

  // Merge the channels
  merge(channels,hsvImage);

  // Convert back from float32
  hsvImage.convertTo(hsvImage,CV_8UC3);

  Mat imSat;
  // Convert to BGR color space
  cv::cvtColor(hsvImage,imSat,COLOR_HSV2BGR);

  // Display the images
  Mat combined;
  cv::hconcat(Image, imSat, combined);
  namedWindow("Original Image   --   Desaturated Image",WINDOW_AUTOSIZE);

  imshow("Original Image   --   Desaturated Image",combined);
  cv::imwrite("results/desaturated.jpg",imSat);

  // Wait for user to press a key
  waitKey(0);
  destroyAllWindows();

  return 0;
}




# Copyright 2017 BIG VISION LLC ALL RIGHTS RESERVED
# 
# This code is made available to the students of 
# the online course titled "Computer Vision for Faces" 
# by Satya Mallick for personal non-commercial use. 
#
# Sharing this code is strictly prohibited without written
# permission from Big Vision LLC. 
#
# For licensing and other inquiries, please email 
# spmallick@bigvisionllc.com 
# 

import cv2,argparse
import numpy as np

ap = argparse.ArgumentParser()
ap.add_argument("-f", "--filename")
args = vars(ap.parse_args())

filename = "../data/images/capsicum.jpg"
if args['filename']:
  filename = args['filename']

img = cv2.imread(filename)

# Specify scaling factor
saturationScale = 0.01

# Convert to HSV color space
hsvImage = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)

# Convert to float32
hsvImage = np.float32(hsvImage)

# Split the channels
H, S, V = cv2.split(hsvImage)

# Multiply S channel by scaling factor and clip the values to stay in 0 to 255 
S = np.clip(S * saturationScale , 0, 255)

# Merge the channels and show the output
hsvImage = np.uint8( cv2.merge([H, S, V]) )
imSat = cv2.cvtColor(hsvImage, cv2.COLOR_HSV2BGR)

combined = np.hstack([img,imSat])

cv2.namedWindow("Original Image   --   Desaturated Image", cv2.WINDOW_AUTOSIZE)
cv2.imshow("Original Image   --   Desaturated Image", combined)
cv2.waitKey(0)
cv2.destroyAllWindows()

cv2.imwrite("results/desaturated.jpg",imSat)






